@using System.Linq.Expressions
@typeparam T

<table class="table table-striped table-bordered table-sm">
    <thead>
        <tr>
            @if (LinkColumns != null)
            {
                for (int i = 0; i < LinkColumns.Length; i++)
                {
                    <th></th>
                }
            }
            @foreach (var f in Fields)
            {
                <th>@(UtilsX.DisplayName(f))</th>
            }
        </tr>
    </thead>
    <tbody>
        @{ int j = 0; }
        @foreach (var item in Data)
        {
            <tr>
                @if (LinkColumns != null)
                {
                    @foreach (var col in LinkColumns)
                    {

                        <td><a href="@(col.Link.Replace("{" + col.FieldName + "}", col.Field.GetValue(item).ToString()))">@col.Text</a></td>
                    }
                }
                @foreach (var f in Fields)
                {
                    var val = f.GetValue(item);
                    <td @attributes="CellAttrs(f.Name, j)">
                        @if (val is bool)
                        {
                            <input type="checkbox" disabled checked="@((bool)val)" />
                        }
                        else if (val is DateTime && ShortDates)
                        {
                            @(((DateTime)val).ToShortDateString())
                        }
                        else if (f.PropertyType.IsEnum)
                        {
                            @UtilsX.DisplayName(f.PropertyType, val.ToString());
                        }
                        else
                        {
                            @val
                        }
                    </td>
                }
            </tr>
            j++;
        }
    </tbody>
</table>

@code {

    public class LinkColumn
    {
        public string Text { get; set; }
        public string Link { get; set; }
        public string FieldName { get; set; }

        private System.Reflection.PropertyInfo _field = null;

        public System.Reflection.PropertyInfo Field
        {
            get
            {
                if (_field == null)
                    _field = typeof(T).GetProperty(FieldName);
                return _field;
            }
        }
    }

    [Parameter]
    public IEnumerable<T> Data { get; set; }

    [Parameter]
    public string[] FieldNames { get; set; }

    [Parameter]
    public string[] ExcludeFieldNames { get; set; }

    [Parameter]
    public LinkColumn[] LinkColumns { get; set; }

    [Parameter]
    public Dictionary<string, List<string>> ColumnsBackColor { get; set; }

    [Parameter]
    public bool ShortDates { get; set; } = true;

    private List<System.Reflection.PropertyInfo> Fields;

    private static readonly Type[] AllowedTypes = new Type[]
    {
        typeof(int), typeof(string), typeof(float), typeof(long), typeof(int?)
    };

    protected override void OnInitialized()
    {
        Fields = new List<System.Reflection.PropertyInfo>();
        var props = typeof(T).GetProperties();
        if (FieldNames != null)
        {
            foreach (var f in FieldNames)
                Fields.Add(props.First(x => x.Name == f));
        }
        else
        {
            foreach (var p in props)
            {
                if (AllowedTypes.Contains(p.PropertyType) && (ExcludeFieldNames == null || !ExcludeFieldNames.Contains(p.Name)))
                    Fields.Add(p);
            }
        }
    }

    private Dictionary<string, object> CellAttrs(string col, int index)
    {
        var dic = new Dictionary<string, object>(1);
        if (ColumnsBackColor != null && ColumnsBackColor.ContainsKey(col))
        {
            dic.Add("style", "background-color: " + ColumnsBackColor[col][index] + ";");
        }
        return dic;
    }
}
