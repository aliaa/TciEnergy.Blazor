@page "/reports/total"
@attribute [Authorize]

@inject HttpClientX http
@inject IToastService toast

<div class="container">
    <h3>گزارش کلی</h3>

    <div class="row mt-5">
        <div class="col-md-3">
            <EditForm Model="model" OnValidSubmit="Submit">
                @if (cities != null)
                {
                    <div class="form-group">
                        <Label For="() => model.City" />
                        <InputSelect @bind-Value="model.City" class="form-control">
                            <option value="all">همه</option>
                            @foreach (var c in cities)
                                {
                                <option value="@c.Id">@c.Name</option>
                                }
                        </InputSelect>
                    </div>
                }
                @if (periods != null)
                {
                    <div class="form-group">
                        <Label For="() => model.Period" />
                        <InputSelect @bind-Value="model.Period" class="form-control">
                            <option value="all">همه</option>
                            @foreach (var p in periods)
                                {
                                <option>@p</option>
                                }
                        </InputSelect>
                    </div>
                }
                <div class="form-group">
                    <Label For="() => model.BasedOn" />
                    <InputSelect @bind-Value="model.BasedOn" class="form-control">
                        @foreach (var item in UtilsX.GetEnumValues<TotalReportRequest.BasedOnEnum>())
                        {
                            <option value="@item">@UtilsX.DisplayName(item)</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <Label For="() => model.Field" />
                    <InputSelect @bind-Value="model.Field" class="form-control">
                        @foreach (var prop in billFields)
                        {
                            <option value="@prop.Name">@UtilsX.DisplayName(prop)</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <Label For="() => model.Operation" />
                    <InputSelect @bind-Value="model.Operation" class="form-control">
                        @foreach (var item in UtilsX.GetEnumValues<TotalReportRequest.OperationEnum>())
                        {
                            <option value="@item">@UtilsX.DisplayName(item)</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" value="تائید" />
                </div>
            </EditForm>
        </div>
        <div class="col-md-9">
            @if(loading)
            {
                <Loading />
            }
            else if (data != null)
            {
                <BarChart Data="data" />
            }
        </div>
    </div>
</div>

@code {
    private List<City> cities;
    private List<string> periods;

    private static readonly Type[] OperatableTypes = new Type[] { typeof(int), typeof(long), typeof(float), typeof(double) };
    private static readonly System.Reflection.PropertyInfo[] billFields = ElecBill.ValidImportProperties
        .Where(p => OperatableTypes.Contains(p.PropertyType)).ToArray();

    private TotalReportRequest model = new TotalReportRequest();
    private List<ChartItem> data;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        cities = await http.GetFromJsonAsync<List<City>>("Place/CitiesList");
        periods = await http.GetFromJsonAsync<List<string>>("Bills/YearPeriods");
    }

    private async Task Submit(EditContext context)
    {
        if(model.BasedOn == TotalReportRequest.BasedOnEnum.City && model.City != "all")
        {
            toast.ShowError("برای گرفتن گزارش بر اساس شهر، لازم است شهر را همه انتخاب کنید!");
            return;
        }
        if(model.BasedOn == TotalReportRequest.BasedOnEnum.Period && model.Period != "all")
        {
            toast.ShowError("برای گرفتن گزارش بر اساس دوره، لازم است دوره را همه انتخاب کنید!");
            return;
        }

        loading = true;
        data = await http.PostAsJsonAsync<TotalReportRequest, List<ChartItem>>("Report/Total", model);
        loading = false;
    }
}
