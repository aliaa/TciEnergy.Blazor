@page "/bills/elec/list"
@attribute [Authorize]

@inject HttpClientX http
@inject IModalService modal

<div>
    <div class="text-center">
        @if (cities != null && yearPeriods != null)
        {
            <label>شهرستان:</label>
            <select @onchange="async (e) => { selectedCity = e.Value.ToString(); await RefreshList(); }">
                <option value="all">همه</option>
                @foreach (var city in cities)
                {
                    <option value="@city.Id.ToString()">@city.Name</option>
                }
            </select>
            <label class="mr-3">دوره:</label>
            <select @onchange="async (e) => { selectedYearPeriod = e.Value.ToString(); await RefreshList(); }">
                @foreach (var yp in yearPeriods)
                {
                    <option>@yp</option>
                }
            </select>
            <button class="btn btn-secondary mr-3" @onclick="DownloadExcelFile">خروجی فایل اکسل</button>
        }
    </div>
    <div class="mt-4">
        @if (bills == null)
        {
            <Loading />
        }
        else
        {
            <div class="table-responsive">
                <ObjectTable Data="bills" LinkColumns="linkColumns" ActionColumns="actionColumns" ColumnsBackColor="ColumnsBackColor"
                             OnActionClick="async (KeyValuePair<string, ClientElecBill> arg) => await HandleActionClick(arg)" />
            </div>
        }
    </div>
</div>

@code {

    private ObjectTable<ClientElecBill>.LinkColumn[] linkColumns = new ObjectTable<ClientElecBill>.LinkColumn[]
    {
        new ObjectTable<ClientElecBill>.LinkColumn
        {
            Name = "SubscriberDetails",
            Text = "جزئیات مشترک",
            KeyFieldName = nameof(ClientElecBill.SubscriberId),
            Link = "/subscribers/details/{"+nameof(ClientElecBill.SubscriberId) +"}"
        }
    };

    private ObjectTable<ClientElecBill>.Column[] actionColumns = new ObjectTable<ClientElecBill>.Column[]
    {
        new ObjectTable<ClientElecBill>.Column
        {
            Name = "ChangeStatus",
            Text = "تغییر وضعیت"
        }
    };

    private Dictionary<string, List<string>> ColumnsBackColor;

    private List<City> cities;
    private List<string> yearPeriods;
    private string selectedCity = "all";
    private string selectedYearPeriod;
    private List<ClientElecBill> bills;

    protected override async Task OnInitializedAsync()
    {
        cities = await http.GetFromJsonAsync<List<City>>("Place/CitiesList");
        yearPeriods = await http.GetFromJsonAsync<List<string>>("Bills/YearPeriods");
        if (yearPeriods != null && yearPeriods.Count > 0)
        {
            selectedYearPeriod = yearPeriods[0];
            await RefreshList();
        }
    }

    private async Task RefreshList()
    {
        bills = null;
        StateHasChanged();
        bills = await http.GetFromJsonAsync<List<ClientElecBill>>("Bills/List?city=" + selectedCity + "&yearPeriod=" + selectedYearPeriod);
        ColumnsBackColor = new Dictionary<string, List<string>>();
        var colorsList = new List<string>(bills.Count);
        foreach (var b in bills)
        {
            string color;
            if (b.PayStatus == ElecBill.PayStatusEnum.NotPaid)
                color = "hsl(0deg 70% 80%)";
            else if (b.PayStatus == ElecBill.PayStatusEnum.Paid)
                color = "hsl(110deg 70% 80%)";
            else
                color = "hsl(220deg 70% 80%)";
            colorsList.Add(color);
        }
        ColumnsBackColor.Add(nameof(ClientElecBill.PayStatus), colorsList);
    }

    private async Task DownloadExcelFile()
    {
        await http.DownloadFile("Bills/ExcelFile?city=" + selectedCity + "&yearPeriod=" + selectedYearPeriod);
    }

    private async Task HandleActionClick(KeyValuePair<string, ClientElecBill> arg)
    {
        if(arg.Key == "ChangeStatus")
        {
            var param = new ModalParameters();
            param.Add(nameof(BillStatusChange.Bill), arg.Value);
            var changeStatusModal = modal.Show<BillStatusChange>("تغییر وضعیت پرداخت", param);
            var result = await changeStatusModal.Result;
            if (!result.Cancelled)
                await RefreshList();
        }
    }
}
