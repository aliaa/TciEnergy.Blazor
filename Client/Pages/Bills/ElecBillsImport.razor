@page "/bills/elec/import"
@attribute [Authorize(nameof(Permission.ImportBills))]

@inject HttpClientX http
@inject IToastService toast

@using BlazorInputFile

<div class="container">
    @if (loading)
    {
        <Loading />
    }
    else if (uploadResult == null)
    {
        <div class="form-group">
            <label>فایل اکسل ورودی</label>
            <InputFile OnChange="HandleFileSelection" class="mr-2" />
        </div>
        <div>
            <small class="text-muted">توجه: فقط اولین شیت فایل اکسل بررسی خواهد شد!</small>
        </div>
    }
    else if (errors == null)
    {
        <h4>لطفا فیلد مربوط به هر ستون را انتخاب نمائید</h4>
        <div class="row mt-5">
            @foreach (var header in uploadResult.Headers)
            {
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="form-group">
                        <label class="text-info">@header.Text</label>
                        <select @onchange="(v) => ColumnFieldSelected(header.ColumnIndex, v.Value.ToString())" class="form-control">
                            <option value="">-</option>
                            @foreach (var field in BillFields)
                            {
                                <option value="@field.Key"
                                        selected="@(header.BestSimilarField == field.Key && header.SimilarityRate >= MIN_SIMILARITY_RATE)">
                                    @field.Value
                                </option>
                            }
                        </select>
                    </div>
                </div>
            }
        </div>

        <div class="mt-5">
            <div class="form-group">
                <input type="checkbox" id="chkRewrite" @bind-value="rewrite" />
                <label for="chkRewrite">بازنویسی قبوض در صورت تکراری بودن</label>
            </div>
            <div class="form-group">
                <button class="btn btn-primary" @onclick="SubmitSelectedColumns">تائید</button>
            </div>
        </div>
    }
    
    @if (errors != null)
    {
        if (errors.Count == 0)
        {
            <h4 class="mt-5 text-success">بارگزاری با موفقیت انجام شد!</h4>
        }
        else
        {
            <h4 class="mt-5 text-danger">وارد سازی فایل با خطاهایی روبرو شد</h4>
            <h6 class="text-muted">لطفا خطاها را حل کرده و فایل را دوباره بارگزاری نمائید.</h6>
            <ul class="mt-5 text-danger" style="columns:2;">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }
    }
</div>

@code {
    private const float MIN_SIMILARITY_RATE = 0.4f;

    private bool loading = false;
    private UploadExcelResult uploadResult;
    private Dictionary<int, string> selectedColumns = new Dictionary<int, string>();
    private bool rewrite;
    private List<string> errors = null;

    private static readonly Dictionary<string, string> BillFields = ElecBill.ValidImportProperties.ToDictionary(k => k.Name, v => UtilsX.DisplayName(v));

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (!file.Name.EndsWith(".xlsx"))
        {
            toast.ShowError("فایل وارد شده بایستی فایل اکسل با پسوند xlsx باشد!");
            return;
        }
        loading = true;
        uploadResult = await http.UploadFile<UploadExcelResult>("BillsImport/UploadExcel", file.Data, file.Name);
        foreach (var header in uploadResult.Headers)
            if (header.SimilarityRate >= MIN_SIMILARITY_RATE)
                ColumnFieldSelected(header.ColumnIndex, header.BestSimilarField);

        loading = false;
    }

    private void ColumnFieldSelected(int columnIndex, string field)
    {
        if (string.IsNullOrEmpty(field) || field == "-")
        {
            if (selectedColumns.ContainsKey(columnIndex))
                selectedColumns.Remove(columnIndex);
        }
        else
        {
            if (selectedColumns.ContainsKey(columnIndex))
                selectedColumns[columnIndex] = field;
            else
                selectedColumns.Add(columnIndex, field);
        }
    }

    private async Task SubmitSelectedColumns()
    {
        var duplicates = selectedColumns.GroupBy(kv => kv.Value).Where(g => g.Count() > 1).Select(g => g.Key).ToList();
        if(duplicates.Count > 0)
        {
            var fieldName = UtilsX.DisplayName(typeof(ElecBill).GetProperty(duplicates[0]));
            toast.ShowError($"در فیلدهای انتخاب شده \"{fieldName}\" بیش از یک بار انتخاب شده است!");
            return;
        }
        loading = true;
        var req = new SelectedExcelColumns { FileName = uploadResult.FileName, SelectedColumns = selectedColumns };
        errors = await http.PostAsJsonAsync<SelectedExcelColumns, List<string>>("BillsImport/SubmitExcelColumns", req);
        uploadResult = null;
        loading = false;
    }
}
